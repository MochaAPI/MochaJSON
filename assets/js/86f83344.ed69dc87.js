"use strict";(globalThis.webpackChunkmochaapi_client_docs=globalThis.webpackChunkmochaapi_client_docs||[]).push([[505],{8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>r});var s=t(6540);const i={},a=s.createContext(i);function l(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(a.Provider,{value:n},e.children)}},9445:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"usage/kotlin-examples","title":"Kotlin Examples","description":"Complete Kotlin usage examples for MochaJSON v1.0.0, showcasing the new stateless library design with coroutines integration.","source":"@site/docs/usage/kotlin-examples.md","sourceDirName":"usage","slug":"/usage/kotlin-examples","permalink":"/MochaJSON/usage/kotlin-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/MochaAPI/MochaJSON/tree/main/docs/docs/usage/kotlin-examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Java Examples","permalink":"/MochaJSON/usage/java-examples"},"next":{"title":"JSON Handling","permalink":"/MochaJSON/usage/json-handling"}}');var i=t(4848),a=t(8453);const l={},r="Kotlin Examples",o={},c=[{value:"v1.0.0 Stateless Design Examples",id:"v100-stateless-design-examples",level:2},{value:"Basic GET with Production-Safe Defaults",id:"basic-get-with-production-safe-defaults",level:3},{value:"Development with Localhost Access",id:"development-with-localhost-access",level:3},{value:"Kotlin Idiomatic Usage",id:"kotlin-idiomatic-usage",level:3},{value:"Kotlin DSL Pattern",id:"kotlin-dsl-pattern",level:3},{value:"Coroutines Integration",id:"coroutines-integration",level:3},{value:"Multiple Clients in Kotlin",id:"multiple-clients-in-kotlin",level:3},{value:"Advanced Coroutines Example",id:"advanced-coroutines-example",level:3},{value:"Stateless Resource Management",id:"stateless-resource-management",level:3},{value:"Traditional Examples (Still Work in v1.0.0)",id:"traditional-examples-still-work-in-v100",level:2},{value:"GET Request with Map Parsing",id:"get-request-with-map-parsing",level:3},{value:"GET Request with Data Class",id:"get-request-with-data-class",level:2},{value:"POST Request with JSON Body",id:"post-request-with-json-body",level:2},{value:"Query Parameters and Headers",id:"query-parameters-and-headers",level:2},{value:"Async Requests",id:"async-requests",level:2},{value:"Complex Nested Objects",id:"complex-nested-objects",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"List Processing",id:"list-processing",level:2},{value:"Nested JSON Access with JsonMap",id:"nested-json-access-with-jsonmap",level:3},{value:"Functional Style with Extension Functions",id:"functional-style-with-extension-functions",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"kotlin-examples",children:"Kotlin Examples"})}),"\n",(0,i.jsx)(n.p,{children:"Complete Kotlin usage examples for MochaJSON v1.0.0, showcasing the new stateless library design with coroutines integration."}),"\n",(0,i.jsx)(n.h2,{id:"v100-stateless-design-examples",children:"v1.0.0 Stateless Design Examples"}),"\n",(0,i.jsx)(n.h3,{id:"basic-get-with-production-safe-defaults",children:"Basic GET with Production-Safe Defaults"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\nfun main() {\n    try {\n        // Simple static API - uses production defaults\n        val data = Api.get("https://jsonplaceholder.typicode.com/users/1")\n            .execute()\n            .toMap()\n        \n        println("Name: ${data["name"]}")\n        println("Email: ${data["email"]}")\n        \n    } catch (e: ApiException) {\n        println("API Error: ${e.message}")\n    } catch (e: JsonException) {\n        println("JSON Error: ${e.message}")\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"development-with-localhost-access",children:"Development with Localhost Access"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\nimport java.time.Duration\n\nfun main() {\n    try {\n        // ApiClient for localhost development\n        val devClient = ApiClient.Builder()\n            .allowLocalhost(true)           // Allow localhost for development\n            .connectTimeout(Duration.ofSeconds(10))\n            .readTimeout(Duration.ofSeconds(30))\n            .enableRetry()                 // Simple retry with 3 attempts\n            .enableLogging()               // Console logging\n            .build()\n        \n        // Use the client\n        val user = devClient.get("http://localhost:8080/api/users/1")\n            .execute()\n            .toMap()\n        \n        println("Local user: ${user["name"]}")\n        \n    } catch (e: ApiException) {\n        println("API Error: ${e.message}")\n    } catch (e: JsonException) {\n        println("JSON Error: ${e.message}")\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"kotlin-idiomatic-usage",children:"Kotlin Idiomatic Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\nimport java.time.Duration\n\n// Extension functions for cleaner syntax\nfun <T> ApiRequest.fetchAs(clazz: Class<T>): T = \n    execute().to(clazz)\n\nfun main() {\n    try {\n        val user = Api.get("https://jsonplaceholder.typicode.com/users/1")\n            .fetchAs(User::class.java)\n        \n        println("User: ${user.name}")\n        \n    } catch (e: Exception) {\n        println("Error: ${e.message}")\n    }\n}\n\ndata class User(\n    val id: Int,\n    val name: String,\n    val email: String\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"kotlin-dsl-pattern",children:"Kotlin DSL Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\nimport java.time.Duration\n\nfun main() {\n    try {\n        // Builder with Kotlin DSL\n        val client = ApiClient.Builder().apply {\n            connectTimeout(Duration.ofSeconds(10))\n            readTimeout(Duration.ofSeconds(30))\n            enableRetry()\n            allowLocalhost(true)\n            enableLogging()\n        }.build()\n        \n        val user = client.get("https://jsonplaceholder.typicode.com/users/1")\n            .execute()\n            .toMap()\n        \n        println("User: ${user["name"]}")\n        \n    } catch (e: Exception) {\n        println("Error: ${e.message}")\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"coroutines-integration",children:"Coroutines Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\nimport kotlinx.coroutines.*\nimport java.time.Duration\n\nfun main() = runBlocking {\n    try {\n        val client = ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(10))\n            .build()\n        \n        // Async with coroutines\n        val user = fetchUser(client, 1)\n        println("User: ${user.name}")\n        \n    } catch (e: Exception) {\n        println("Error: ${e.message}")\n    }\n}\n\nsuspend fun fetchUser(client: ApiClient, id: Int): User = withContext(Dispatchers.IO) {\n    client.get("https://jsonplaceholder.typicode.com/users/$id")\n        .execute()\n        .to(User::class.java)\n}\n\ndata class User(\n    val id: Int,\n    val name: String,\n    val email: String\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"multiple-clients-in-kotlin",children:"Multiple Clients in Kotlin"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\nimport java.time.Duration\n\nobject ApiClients {\n    val github by lazy {\n        ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(10))\n            .requestInterceptor { req ->\n                req.header("Authorization", "Bearer ${getGithubToken()}")\n                req\n            }\n            .build()\n    }\n    \n    val internal by lazy {\n        ApiClient.Builder()\n            .allowLocalhost(true)\n            .connectTimeout(Duration.ofSeconds(5))\n            .build()\n    }\n    \n    private fun getGithubToken(): String = System.getenv("GITHUB_TOKEN") ?: ""\n}\n\nfun main() {\n    try {\n        // Use different clients\n        val githubUser = ApiClients.github.get("https://api.github.com/user")\n            .execute()\n            .toMap()\n        \n        val internalUser = ApiClients.internal.get("http://localhost:8080/api/user")\n            .execute()\n            .toMap()\n        \n        println("GitHub user: ${githubUser["login"]}")\n        println("Internal user: ${internalUser["name"]}")\n        \n    } catch (e: Exception) {\n        println("Error: ${e.message}")\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"advanced-coroutines-example",children:"Advanced Coroutines Example"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\nimport kotlinx.coroutines.*\nimport java.time.Duration\n\nclass UserService {\n    private val client = ApiClient.Builder()\n        .connectTimeout(Duration.ofSeconds(10))\n        .enableRetry()\n        .build()\n    \n    suspend fun getUser(id: Int): User = withContext(Dispatchers.IO) {\n        client.get("https://jsonplaceholder.typicode.com/users/$id")\n            .execute()\n            .to(User::class.java)\n    }\n    \n    suspend fun getUsers(ids: List<Int>): List<User> = coroutineScope {\n        ids.map { id ->\n            async { getUser(id) }\n        }.awaitAll()\n    }\n    \n    suspend fun createUser(user: User): User = withContext(Dispatchers.IO) {\n        client.post("https://jsonplaceholder.typicode.com/users")\n            .body(user)\n            .execute()\n            .to(User::class.java)\n    }\n}\n\nfun main() = runBlocking {\n    try {\n        val userService = UserService()\n        \n        // Fetch multiple users concurrently\n        val users = userService.getUsers(listOf(1, 2, 3))\n        users.forEach { user ->\n            println("User: ${user.name}")\n        }\n        \n        // Create a new user\n        val newUser = User(name = "John Doe", email = "john@example.com")\n        val createdUser = userService.createUser(newUser)\n        println("Created user: ${createdUser.name}")\n        \n    } catch (e: Exception) {\n        println("Error: ${e.message}")\n    }\n}\n\ndata class User(\n    val id: Int = 0,\n    val name: String,\n    val email: String\n)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"stateless-resource-management",children:"Stateless Resource Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\nimport java.time.Duration\n\nfun main() {\n    try {\n        // No shutdown needed - library is stateless\n        // Create clients as needed\n        val client1 = ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(10))\n            .build()\n            \n        val client2 = ApiClient.Builder()\n            .allowLocalhost(true)\n            .connectTimeout(Duration.ofSeconds(5))\n            .build()\n        \n        // Use them independently, no cleanup required\n        val data1 = client1.get("https://api1.example.com/data")\n            .execute()\n            .toMap()\n            \n        val data2 = client2.get("http://localhost:8080/api/data")\n            .execute()\n            .toMap()\n        \n        println("External data: ${data1["value"]}")\n        println("Local data: ${data2["value"]}")\n        \n    } catch (e: Exception) {\n        println("Error: ${e.message}")\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"traditional-examples-still-work-in-v100",children:"Traditional Examples (Still Work in v1.0.0)"}),"\n",(0,i.jsx)(n.h3,{id:"get-request-with-map-parsing",children:"GET Request with Map Parsing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\nfun main() {\n    // GET request \u2192 Map\n    val post = Api.get("https://jsonplaceholder.typicode.com/posts/1")\n        .execute()\n        .toMap()\n    \n    println("Post ID: ${post["id"]}")\n    println("Post Title: ${post["title"]}")\n    println("Post Body: ${post["body"]}")\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sample JSON Response:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Sample Value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"userId"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Int"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"1"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"id"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Int"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"1"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"title"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"sunt aut facere repellat provident occaecati excepturi optio reprehenderit"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"body"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto"'})})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"get-request-with-data-class",children:"GET Request with Data Class"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\ndata class Post(\n    val id: Int,\n    val userId: Int,\n    val title: String,\n    val body: String\n)\n\nfun main() {\n    // GET request \u2192 Data class\n    val post = Api.get("https://jsonplaceholder.typicode.com/posts/1")\n        .execute()\n        .to(Post::class.java)\n    \n    println("Post ID: ${post.id}")\n    println("Post Title: ${post.title}")\n    println("Post Body: ${post.body}")\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"post-request-with-json-body",children:"POST Request with JSON Body"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\ndata class Post(\n    val id: Int,\n    val userId: Int,\n    val title: String,\n    val body: String\n)\n\nfun main() {\n    // Create request body\n    val newPost = mapOf(\n        "title" to "My Kotlin Post",\n        "body" to "This post was created from Kotlin!",\n        "userId" to 1\n    )\n    \n    // POST request\n    val response = Api.post("https://jsonplaceholder.typicode.com/posts")\n        .body(newPost)\n        .execute()\n    \n    println("Status Code: ${response.code()}")\n    \n    // Parse response to Map\n    val responseMap = response.toMap()\n    println("Created Post ID: ${responseMap["id"]}")\n    println("Created Post Title: ${responseMap["title"]}")\n    \n    // Parse response to Data class\n    val createdPost = response.to(Post::class.java)\n    println("Created Post: ${createdPost.title}")\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sample Response JSON:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Sample Value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"id"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Int"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"101"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"title"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"My Kotlin Post"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"body"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"This post was created from Kotlin!"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"userId"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Int"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"1"})})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"query-parameters-and-headers",children:"Query Parameters and Headers"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\nfun main() {\n    val response = Api.get("https://jsonplaceholder.typicode.com/posts")\n        .query("userId", 1)\n        .query("_limit", 5)\n        .header("Authorization", "Bearer token123")\n        .header("User-Agent", "MyApp/1.0")\n        .execute()\n    \n    val posts = response.toList()\n    println("Found ${posts.size} posts")\n    \n    // Process each post\n    posts.forEachIndexed { index, postObj ->\n        val post = postObj as Map<String, Any>\n        println("Post ${post["id"]}: ${post["title"]}")\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"async-requests",children:"Async Requests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\nfun main() {\n    Api.get("https://jsonplaceholder.typicode.com/posts/1")\n        .async { response ->\n            println("Async response: ${response.body()}")\n            println("Status: ${response.code()}")\n        }\n    \n    // Main thread continues...\n    println("Request sent asynchronously")\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"complex-nested-objects",children:"Complex Nested Objects"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\ndata class User(\n    val id: Int,\n    val name: String,\n    val username: String,\n    val email: String,\n    val phone: String,\n    val website: String,\n    val address: Address,\n    val company: Company\n)\n\ndata class Address(\n    val street: String,\n    val suite: String,\n    val city: String,\n    val zipcode: String,\n    val geo: Geo\n)\n\ndata class Geo(\n    val lat: String,\n    val lng: String\n)\n\ndata class Company(\n    val name: String,\n    val catchPhrase: String,\n    val bs: String\n)\n\nfun main() {\n    val user = Api.get("https://jsonplaceholder.typicode.com/users/1")\n        .execute()\n        .to(User::class.java)\n    \n    println("User Name: ${user.name}")\n    println("User Email: ${user.email}")\n    println("User Address: ${user.address.street}, ${user.address.city}")\n    println("User Company: ${user.company.name}")\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Sample User JSON Response:"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Sample Value"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"id"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"Int"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"1"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"name"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"Leanne Graham"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"email"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"Sincere@april.biz"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"phone"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"1-770-736-8031 x56442"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"website"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"hildegard.org"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"address.street"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"Kulas Light"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"address.city"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"Gwenborough"'})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"company.name"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"String"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:'"Romaguera-Crona"'})})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\nimport io.mochaapi.client.exception.*\n\ndata class Post(\n    val id: Int,\n    val userId: Int,\n    val title: String,\n    val body: String\n)\n\nfun main() {\n    try {\n        val response = Api.get("https://jsonplaceholder.typicode.com/posts/1")\n            .execute()\n        \n        if (response.isError()) {\n            println("HTTP Error: ${response.code()}")\n            return\n        }\n        \n        val post = response.to(Post::class.java)\n        println("Success: ${post.title}")\n        \n    } catch (e: ApiException) {\n        println("Network/HTTP Error: ${e.message}")\n    } catch (e: JsonException) {\n        println("JSON Parsing Error: ${e.message}")\n    } catch (e: Exception) {\n        println("Unexpected Error: ${e.message}")\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"list-processing",children:"List Processing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\ndata class Post(\n    val id: Int,\n    val userId: Int,\n    val title: String,\n    val body: String\n)\n\nfun main() {\n    val response = Api.get("https://jsonplaceholder.typicode.com/posts")\n        .query("userId", 1)\n        .query("_limit", 3)\n        .execute()\n    \n    val posts = response.toList()\n    println("Found ${posts.size} posts for user 1")\n    \n    posts.forEach { postObj ->\n        val post = postObj as Map<String, Any>\n        println("Post ${post["id"]}: ${post["title"]}")\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"nested-json-access-with-jsonmap",children:"Nested JSON Access with JsonMap"}),"\n",(0,i.jsx)(n.p,{children:"JsonMap provides a clean, chainable API for accessing nested JSON data without casting boilerplate."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\nfun main() {\n    try {\n        // Example: User profile API with nested data\n        val json = Api.get("https://api.example.com/user/123")\n            .execute()\n            .toJsonMap()\n        \n        // Traditional approach (verbose with casting)\n        val data = json.toMap()\n        val user = data["data"] as Map<String, Any>\n        val name = user["name"] as Map<String, Any>\n        val location = user["location"] as Map<String, Any>\n        val street = location["street"] as Map<String, Any>\n        val coordinates = location["coordinates"] as Map<String, Any>\n        \n        val traditionalName = "${name["first"]} ${name["last"]}"\n        val traditionalAddress = "${street["number"]} ${street["name"]}, ${location["city"]}"\n        val traditionalLat = coordinates["latitude"].toString()\n        \n        // JsonMap approach (clean chaining)\n        val cleanName = "${json.get("data").get("name").get("first")} ${json.get("data").get("name").get("last")}"\n        val cleanAddress = "${json.get("data").get("location").get("street").get("number")} " +\n                          "${json.get("data").get("location").get("street").get("name")}, " +\n                          "${json.get("data").get("location").get("city")}"\n        val cleanLat = json.get("data").get("location").get("coordinates").get("latitude").toString()\n        \n        println("Name: $cleanName")\n        println("Address: $cleanAddress")\n        println("Latitude: $cleanLat")\n        \n        // Intermediate access for complex operations\n        val userData = json.get("data")\n        val locationData = userData.get("location")\n        \n        val email = userData.get("email").toString()\n        val city = locationData.get("city").toString()\n        val state = locationData.get("state").toString()\n        \n        println("Email: $email")\n        println("Location: $city, $state")\n        \n        // Kotlin extension functions for even cleaner syntax\n        fun JsonMap.safeGet(key: String): String = get(key).toString()\n        \n        val firstName = json.get("data").get("name").safeGet("first")\n        val lastName = json.get("data").get("name").safeGet("last")\n        val fullName = "$firstName $lastName"\n        \n        println("Full name: $fullName")\n        \n    } catch (e: Exception) {\n        println("Error: ${e.message}")\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Benefits for Kotlin developers:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No casting"}),": Eliminates ",(0,i.jsx)(n.code,{children:"as Map<String, Any>"})," casts"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Null safety"}),": Works well with Kotlin's null safety features"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Extension functions"}),": Can create custom extension functions for cleaner syntax"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Coroutines friendly"}),": Works seamlessly with async operations"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"functional-style-with-extension-functions",children:"Functional Style with Extension Functions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\n\n// Extension function for cleaner syntax\nfun ApiRequest.executeToMap(): Map<String, Any> = execute().toMap()\n\nfun main() {\n    val posts = Api.get("https://jsonplaceholder.typicode.com/posts")\n        .query("userId", 1)\n        .query("_limit", 2)\n        .executeToMap()\n    \n    println("Posts: $posts")\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/MochaJSON/usage/java-examples",children:"Java Examples"})})," - See equivalent Java code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/MochaJSON/usage/json-handling",children:"JSON Handling"})})," - Advanced JSON parsing techniques"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/MochaJSON/api/overview",children:"API Reference"})})," - Complete API documentation"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);