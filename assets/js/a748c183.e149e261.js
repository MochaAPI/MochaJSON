"use strict";(globalThis.webpackChunkmochaapi_client_docs=globalThis.webpackChunkmochaapi_client_docs||[]).push([[888],{8144:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"usage/java-examples","title":"Java Examples","description":"Complete Java usage examples for MochaJSON v1.0.0, showcasing the new stateless library design with no lifecycle management.","source":"@site/docs/usage/java-examples.md","sourceDirName":"usage","slug":"/usage/java-examples","permalink":"/MochaJSON/usage/java-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/MochaAPI/MochaJSON/tree/main/docs/docs/usage/java-examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\ud83d\udcda Library vs Framework","permalink":"/MochaJSON/library-vs-framework"},"next":{"title":"Kotlin Examples","permalink":"/MochaJSON/usage/kotlin-examples"}}');var s=t(4848),r=t(8453);const a={},l="Java Examples",c={},o=[{value:"v1.0.0 Stateless Design Examples",id:"v100-stateless-design-examples",level:2},{value:"Basic GET with Production-Safe Defaults",id:"basic-get-with-production-safe-defaults",level:3},{value:"Development with Localhost Access",id:"development-with-localhost-access",level:3},{value:"Stateless Resource Management",id:"stateless-resource-management",level:3},{value:"Security Configuration Examples",id:"security-configuration-examples",level:3},{value:"Nested JSON Access with JsonMap",id:"nested-json-access-with-jsonmap",level:3},{value:"Multiple Clients Pattern",id:"multiple-clients-pattern",level:3},{value:"Complete Real-World Example",id:"complete-real-world-example",level:3},{value:"Traditional Examples (Still Work in v1.0.0)",id:"traditional-examples-still-work-in-v100",level:2},{value:"GET Request with Map Parsing",id:"get-request-with-map-parsing",level:3},{value:"GET Request with POJO Parsing",id:"get-request-with-pojo-parsing",level:2},{value:"POST Request with JSON Body",id:"post-request-with-json-body",level:2},{value:"Query Parameters and Headers",id:"query-parameters-and-headers",level:2},{value:"Async Requests",id:"async-requests",level:2},{value:"Complex Nested Objects",id:"complex-nested-objects",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"java-examples",children:"Java Examples"})}),"\n",(0,s.jsx)(n.p,{children:"Complete Java usage examples for MochaJSON v1.0.0, showcasing the new stateless library design with no lifecycle management."}),"\n",(0,s.jsx)(n.h2,{id:"v100-stateless-design-examples",children:"v1.0.0 Stateless Design Examples"}),"\n",(0,s.jsx)(n.h3,{id:"basic-get-with-production-safe-defaults",children:"Basic GET with Production-Safe Defaults"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\nimport java.util.Map;\n\npublic class BasicExample {\n    public static void main(String[] args) {\n        try {\n            // Simple static API - uses production defaults\n            Map<String, Object> data = Api.get("https://jsonplaceholder.typicode.com/users/1")\n                .execute()\n                .toMap();\n            \n            System.out.println("Name: " + data.get("name"));\n            System.out.println("Email: " + data.get("email"));\n            \n        } catch (ApiException | JsonException e) {\n            e.printStackTrace();\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"development-with-localhost-access",children:"Development with Localhost Access"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\nimport java.time.Duration;\n\npublic class DevelopmentExample {\n    public static void main(String[] args) {\n        try {\n            // ApiClient for localhost development\n            ApiClient devClient = new ApiClient.Builder()\n                .allowLocalhost(true)           // Allow localhost for development\n                .connectTimeout(Duration.ofSeconds(10))\n                .readTimeout(Duration.ofSeconds(30))\n                .enableRetry()                 // Simple retry with 3 attempts\n                .enableLogging()               // Console logging\n                .build();\n            \n            // Use the client\n            Map<String, Object> user = devClient.get("http://localhost:8080/api/users/1")\n                .execute()\n                .toMap();\n            \n            System.out.println("Local user: " + user.get("name"));\n            \n        } catch (ApiException | JsonException e) {\n            e.printStackTrace();\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"stateless-resource-management",children:"Stateless Resource Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\nimport java.time.Duration;\n\npublic class StatelessExample {\n    public static void main(String[] args) {\n        try {\n            // No shutdown needed - library is stateless\n            // Create clients as needed\n            ApiClient client1 = new ApiClient.Builder()\n                .connectTimeout(Duration.ofSeconds(10))\n                .build();\n                \n            ApiClient client2 = new ApiClient.Builder()\n                .allowLocalhost(true)\n                .connectTimeout(Duration.ofSeconds(5))\n                .build();\n            \n            // Use them independently, no cleanup required\n            Map<String, Object> data1 = client1.get("https://api1.example.com/data")\n                .execute()\n                .toMap();\n                \n            Map<String, Object> data2 = client2.get("http://localhost:8080/api/data")\n                .execute()\n                .toMap();\n            \n            System.out.println("External data: " + data1.get("value"));\n            System.out.println("Local data: " + data2.get("value"));\n            \n        } catch (ApiException | JsonException e) {\n            e.printStackTrace();\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"security-configuration-examples",children:"Security Configuration Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\nimport java.time.Duration;\n\npublic class SecurityExample {\n    public static void main(String[] args) {\n        try {\n            // Explicit security control\n            ApiClient prodClient = new ApiClient.Builder()\n                .allowLocalhost(false)  // Production-safe\n                .connectTimeout(Duration.ofSeconds(10))\n                .build();\n            \n            ApiClient devClient = new ApiClient.Builder()\n                .allowLocalhost(true)   // Development-friendly\n                .connectTimeout(Duration.ofSeconds(5))\n                .build();\n            \n            // Production client - blocks localhost\n            Map<String, Object> prodData = prodClient.get("https://api.example.com/data")\n                .execute()\n                .toMap();\n            \n            // Development client - allows localhost\n            Map<String, Object> devData = devClient.get("http://localhost:8080/api/data")\n                .execute()\n                .toMap();\n            \n            System.out.println("Production data: " + prodData.get("value"));\n            System.out.println("Development data: " + devData.get("value"));\n            \n        } catch (ApiException | JsonException e) {\n            e.printStackTrace();\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"nested-json-access-with-jsonmap",children:"Nested JSON Access with JsonMap"}),"\n",(0,s.jsx)(n.p,{children:"When working with deeply nested API responses, JsonMap eliminates the need for verbose casting and provides a clean, chainable API."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\n\npublic class JsonMapExample {\n    public static void main(String[] args) {\n        try {\n            // Example: User profile API with nested data\n            JsonMap response = Api.get("https://api.example.com/user/123")\n                .execute()\n                .toJsonMap();\n            \n            // Traditional approach (verbose with casting)\n            Map<String, Object> data = response.toMap();\n            Map<String, Object> user = (Map<String, Object>) data.get("data");\n            Map<String, Object> name = (Map<String, Object>) user.get("name");\n            Map<String, Object> location = (Map<String, Object>) user.get("location");\n            Map<String, Object> street = (Map<String, Object>) location.get("street");\n            Map<String, Object> coordinates = (Map<String, Object>) location.get("coordinates");\n            \n            String traditionalName = name.get("first") + " " + name.get("last");\n            String traditionalAddress = street.get("number") + " " + street.get("name") + ", " + location.get("city");\n            String traditionalLat = coordinates.get("latitude").toString();\n            \n            // JsonMap approach (clean chaining)\n            String cleanName = response.get("data").get("name").get("first") + " " + \n                              response.get("data").get("name").get("last");\n            String cleanAddress = response.get("data").get("location").get("street").get("number") + " " + \n                                 response.get("data").get("location").get("street").get("name") + ", " + \n                                 response.get("data").get("location").get("city");\n            String cleanLat = response.get("data").get("location").get("coordinates").get("latitude").toString();\n            \n            System.out.println("Name: " + cleanName);\n            System.out.println("Address: " + cleanAddress);\n            System.out.println("Latitude: " + cleanLat);\n            \n            // Intermediate access for complex operations\n            JsonMap userData = response.get("data");\n            JsonMap locationData = userData.get("location");\n            \n            String email = userData.get("email").toString();\n            String city = locationData.get("city").toString();\n            String state = locationData.get("state").toString();\n            \n            System.out.println("Email: " + email);\n            System.out.println("Location: " + city + ", " + state);\n            \n        } catch (ApiException | JsonException e) {\n            e.printStackTrace();\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Benefits of JsonMap:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No casting boilerplate"}),": Eliminates ",(0,s.jsx)(n.code,{children:"(Map<String, Object>)"})," casts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type safety"}),": Prevents ClassCastException errors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Readable code"}),": Chainable syntax reads naturally"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexible access"}),": Supports both direct chaining and intermediate variables"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"multiple-clients-pattern",children:"Multiple Clients Pattern"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\nimport java.time.Duration;\nimport java.util.concurrent.CompletableFuture;\n\npublic class MultipleClientsExample {\n    public static void main(String[] args) {\n        try {\n            // Different clients for different APIs - no conflicts\n            ApiClient githubClient = new ApiClient.Builder()\n                .connectTimeout(Duration.ofSeconds(10))\n                .requestInterceptor(req -> {\n                    req.header("Authorization", "Bearer " + getGithubToken());\n                    return req;\n                })\n                .build();\n            \n            ApiClient internalClient = new ApiClient.Builder()\n                .allowLocalhost(true)\n                .connectTimeout(Duration.ofSeconds(5))\n                .build();\n            \n            // Use them simultaneously without conflicts\n            CompletableFuture<Map<String, Object>> githubFuture = githubClient\n                .get("https://api.github.com/user")\n                .executeAsync()\n                .thenApply(response -> response.toMap());\n                \n            CompletableFuture<Map<String, Object>> internalFuture = internalClient\n                .get("http://localhost:8080/api/user")\n                .executeAsync()\n                .thenApply(response -> response.toMap());\n            \n            // Wait for both\n            Map<String, Object> githubUser = githubFuture.get();\n            Map<String, Object> internalUser = internalFuture.get();\n            \n            System.out.println("GitHub user: " + githubUser.get("login"));\n            System.out.println("Internal user: " + internalUser.get("name"));\n            \n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    \n    private static String getGithubToken() {\n        return System.getenv("GITHUB_TOKEN");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"complete-real-world-example",children:"Complete Real-World Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\nimport java.time.Duration;\n\npublic class UserService {\n    private final ApiClient client;\n    \n    public UserService() {\n        this.client = new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(10))\n            .readTimeout(Duration.ofSeconds(30))\n            .enableRetry()\n            .requestInterceptor(req -> {\n                req.header("Authorization", "Bearer " + getToken());\n                return req;\n            })\n            .enableLogging()\n            .build();\n    }\n    \n    public User getUser(int id) {\n        try {\n            return client.get("https://api.example.com/users/" + id)\n                .execute()\n                .to(User.class);\n        } catch (ApiException | JsonException e) {\n            throw new RuntimeException("Failed to get user " + id, e);\n        }\n    }\n    \n    public User createUser(User user) {\n        try {\n            return client.post("https://api.example.com/users")\n                .body(user)\n                .execute()\n                .to(User.class);\n        } catch (ApiException | JsonException e) {\n            throw new RuntimeException("Failed to create user", e);\n        }\n    }\n    \n    private String getToken() {\n        return System.getenv("API_TOKEN");\n    }\n    \n    // POJO class\n    public static class User {\n        public int id;\n        public String name;\n        public String email;\n        \n        public User() {}\n        \n        public User(String name, String email) {\n            this.name = name;\n            this.email = email;\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"traditional-examples-still-work-in-v100",children:"Traditional Examples (Still Work in v1.0.0)"}),"\n",(0,s.jsx)(n.h3,{id:"get-request-with-map-parsing",children:"GET Request with Map Parsing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\nimport java.util.Map;\n\npublic class GetExample {\n    public static void main(String[] args) {\n        // GET request \u2192 Map\n        Map<String, Object> post = Api.get("https://jsonplaceholder.typicode.com/posts/1")\n            .execute()\n            .toMap();\n        \n        System.out.println("Post ID: " + post.get("id"));\n        System.out.println("Post Title: " + post.get("title"));\n        System.out.println("Post Body: " + post.get("body"));\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Sample JSON Response:"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Sample Value"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"userId"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"int"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"1"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"id"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"int"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"1"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"title"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"sunt aut facere repellat provident occaecati excepturi optio reprehenderit"'})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"body"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto"'})})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"get-request-with-pojo-parsing",children:"GET Request with POJO Parsing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\n\npublic class PojoExample {\n    public static void main(String[] args) {\n        // GET request \u2192 POJO\n        Post post = Api.get("https://jsonplaceholder.typicode.com/posts/1")\n            .execute()\n            .to(Post.class);\n        \n        System.out.println("Post ID: " + post.id);\n        System.out.println("Post Title: " + post.title);\n        System.out.println("Post Body: " + post.body);\n    }\n    \n    // POJO class for JSON deserialization\n    public static class Post {\n        public int id;\n        public int userId;\n        public String title;\n        public String body;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"post-request-with-json-body",children:"POST Request with JSON Body"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\nimport java.util.Map;\nimport java.util.HashMap;\n\npublic class PostExample {\n    public static void main(String[] args) {\n        // Create request body\n        Map<String, Object> newPost = new HashMap<>();\n        newPost.put("title", "My New Post");\n        newPost.put("body", "This is the content of my new post.");\n        newPost.put("userId", 1);\n        \n        // POST request\n        ApiResponse response = Api.post("https://jsonplaceholder.typicode.com/posts")\n            .body(newPost)\n            .execute();\n        \n        System.out.println("Status Code: " + response.code());\n        \n        // Parse response to Map\n        Map<String, Object> responseData = response.toMap();\n        System.out.println("Created Post ID: " + responseData.get("id"));\n        System.out.println("Created Post Title: " + responseData.get("title"));\n        \n        // Parse response to POJO\n        Post createdPost = response.to(Post.class);\n        System.out.println("Created Post: " + createdPost.title);\n    }\n    \n    public static class Post {\n        public int id;\n        public int userId;\n        public String title;\n        public String body;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Sample Response JSON:"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Sample Value"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"id"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"int"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"101"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"title"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"My New Post"'})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"body"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"This is the content of my new post."'})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"userId"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"int"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"1"})})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"query-parameters-and-headers",children:"Query Parameters and Headers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\n\npublic class AdvancedExample {\n    public static void main(String[] args) {\n        ApiResponse response = Api.get("https://jsonplaceholder.typicode.com/posts")\n            .query("userId", 1)\n            .query("_limit", 5)\n            .header("Authorization", "Bearer token123")\n            .header("User-Agent", "MyApp/1.0")\n            .execute();\n        \n        var posts = response.toList();\n        System.out.println("Found " + posts.size() + " posts");\n        \n        // Process each post\n        for (Object postObj : posts) {\n            Map<String, Object> post = (Map<String, Object>) postObj;\n            System.out.println("Post " + post.get("id") + ": " + post.get("title"));\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"async-requests",children:"Async Requests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\n\npublic class AsyncExample {\n    public static void main(String[] args) {\n        Api.get("https://jsonplaceholder.typicode.com/posts/1")\n            .async(response -> {\n                System.out.println("Async response: " + response.body());\n                System.out.println("Status: " + response.code());\n            });\n        \n        // Main thread continues...\n        System.out.println("Request sent asynchronously");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"complex-nested-objects",children:"Complex Nested Objects"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\n\npublic class NestedObjectExample {\n    public static void main(String[] args) {\n        User user = Api.get("https://jsonplaceholder.typicode.com/users/1")\n            .execute()\n            .to(User.class);\n        \n        System.out.println("User Name: " + user.name);\n        System.out.println("User Email: " + user.email);\n        System.out.println("User Address: " + user.address.street + ", " + user.address.city);\n        System.out.println("User Company: " + user.company.name);\n    }\n    \n    public static class User {\n        public int id;\n        public String name;\n        public String username;\n        public String email;\n        public String phone;\n        public String website;\n        public Address address;\n        public Company company;\n        \n        public static class Address {\n            public String street;\n            public String suite;\n            public String city;\n            public String zipcode;\n            public Geo geo;\n            \n            public static class Geo {\n                public String lat;\n                public String lng;\n            }\n        }\n        \n        public static class Company {\n            public String name;\n            public String catchPhrase;\n            public String bs;\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Sample User JSON Response:"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Field"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Sample Value"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"id"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"int"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"1"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"name"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"Leanne Graham"'})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"email"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"Sincere@april.biz"'})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"phone"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"1-770-736-8031 x56442"'})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"website"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"hildegard.org"'})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"address.street"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"Kulas Light"'})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"address.city"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"Gwenborough"'})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"company.name"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"String"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:'"Romaguera-Crona"'})})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\nimport io.mochaapi.client.exception.*;\n\npublic class ErrorHandlingExample {\n    public static void main(String[] args) {\n        try {\n            ApiResponse response = Api.get("https://jsonplaceholder.typicode.com/posts/1")\n                .execute();\n            \n            if (response.isError()) {\n                System.err.println("HTTP Error: " + response.code());\n                return;\n            }\n            \n            Post post = response.to(Post.class);\n            System.out.println("Success: " + post.title);\n            \n        } catch (ApiException e) {\n            System.err.println("Network/HTTP Error: " + e.getMessage());\n        } catch (JsonException e) {\n            System.err.println("JSON Parsing Error: " + e.getMessage());\n        } catch (Exception e) {\n            System.err.println("Unexpected Error: " + e.getMessage());\n        }\n    }\n    \n    public static class Post {\n        public int id;\n        public int userId;\n        public String title;\n        public String body;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/MochaJSON/usage/kotlin-examples",children:"Kotlin Examples"})})," - See equivalent Kotlin code"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/MochaJSON/usage/json-handling",children:"JSON Handling"})})," - Advanced JSON parsing techniques"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/MochaJSON/api/overview",children:"API Reference"})})," - Complete API documentation"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);