"use strict";(globalThis.webpackChunkmochaapi_client_docs=globalThis.webpackChunkmochaapi_client_docs||[]).push([[993],{8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var t=i(6540);const r={},s=t.createContext(r);function l(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(s.Provider,{value:n},e.children)}},9644:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"best-practices/production-checklist","title":"Production Checklist","description":"Essential checklist for deploying MochaJSON v1.0.0 in production environments. Learn about stateless design, timeout configuration, error handling, and security hardening.","source":"@site/docs/best-practices/production-checklist.md","sourceDirName":"best-practices","slug":"/best-practices/production-checklist","permalink":"/MochaJSON/best-practices/production-checklist","draft":false,"unlisted":false,"editUrl":"https://github.com/MochaAPI/MochaJSON/tree/main/docs/docs/best-practices/production-checklist.md","tags":[],"version":"current","frontMatter":{"title":"Production Checklist","description":"Essential checklist for deploying MochaJSON v1.0.0 in production environments. Learn about stateless design, timeout configuration, error handling, and security hardening.","keywords":["MochaJSON production","production deployment","HTTP client best practices","Java production checklist","Kotlin production","stateless design"]},"sidebar":"tutorialSidebar","previous":{"title":"Interceptors","permalink":"/MochaJSON/advanced/interceptors"},"next":{"title":"Common Mistakes","permalink":"/MochaJSON/best-practices/common-mistakes"}}');var r=i(4848),s=i(8453);const l={title:"Production Checklist",description:"Essential checklist for deploying MochaJSON v1.0.0 in production environments. Learn about stateless design, timeout configuration, error handling, and security hardening.",keywords:["MochaJSON production","production deployment","HTTP client best practices","Java production checklist","Kotlin production","stateless design"]},o="Production Checklist",a={},c=[{value:"v1.0.0 Stateless Design Best Practices",id:"v100-stateless-design-best-practices",level:2},{value:"\u2705 DO",id:"-do",level:3},{value:"\u274c DON&#39;T",id:"-dont",level:3},{value:"Configuration Examples",id:"configuration-examples",level:3},{value:"Production Configuration",id:"production-configuration",level:4},{value:"Development Configuration",id:"development-configuration",level:4},{value:"Test Configuration",id:"test-configuration",level:4},{value:"\u2705 Configuration Checklist",id:"-configuration-checklist",level:2},{value:"Timeout Configuration",id:"timeout-configuration",level:3},{value:"Connection Pooling",id:"connection-pooling",level:3},{value:"Security Configuration",id:"security-configuration",level:3},{value:"Retry Configuration",id:"retry-configuration",level:3},{value:"Resource Management",id:"resource-management",level:3},{value:"\u2705 Error Handling Checklist",id:"-error-handling-checklist",level:2},{value:"Comprehensive Exception Handling",id:"comprehensive-exception-handling",level:3},{value:"Graceful Degradation",id:"graceful-degradation",level:3},{value:"\u2705 Logging Configuration",id:"-logging-configuration",level:2},{value:"Request/Response Logging",id:"requestresponse-logging",level:3},{value:"Custom Logging Interceptors",id:"custom-logging-interceptors",level:3},{value:"Log Levels",id:"log-levels",level:3},{value:"\u2705 Security Checklist",id:"-security-checklist",level:2},{value:"Authentication",id:"authentication",level:3},{value:"URL Validation",id:"url-validation",level:3},{value:"Input Sanitization",id:"input-sanitization",level:3},{value:"\u2705 Performance Checklist",id:"-performance-checklist",level:2},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"Async Operations",id:"async-operations",level:3},{value:"Resource Management",id:"resource-management-1",level:3},{value:"\u2705 Monitoring Checklist",id:"-monitoring-checklist",level:2},{value:"Health Checks",id:"health-checks",level:3},{value:"Metrics Collection",id:"metrics-collection",level:3},{value:"\u2705 Testing Checklist",id:"-testing-checklist",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"\u2705 Deployment Checklist",id:"-deployment-checklist",level:2},{value:"Environment Configuration",id:"environment-configuration",level:3},{value:"Configuration Properties",id:"configuration-properties",level:3},{value:"\u2705 Security Hardening",id:"-security-hardening",level:2},{value:"SSL/TLS Configuration",id:"ssltls-configuration",level:3},{value:"Secrets Management",id:"secrets-management",level:3},{value:"\u2705 Performance Tuning",id:"-performance-tuning",level:2},{value:"Performance Tuning",id:"performance-tuning",level:3},{value:"\u2705 Final Verification",id:"-final-verification",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"production-checklist",children:"Production Checklist"})}),"\n",(0,r.jsx)(n.p,{children:"Deploying MochaJSON v1.0.0 in production? Follow this checklist to ensure your HTTP client is configured for reliability, performance, and security with the new stateless library design."}),"\n",(0,r.jsx)(n.h2,{id:"v100-stateless-design-best-practices",children:"v1.0.0 Stateless Design Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"-do",children:"\u2705 DO"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create ApiClient instances as needed"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// \u2705 Good - Create clients when you need them\npublic class UserService {\n    private final ApiClient client;\n    \n    public UserService() {\n        this.client = new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(10))\n            .build();\n    }\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use static Api for simple, production-safe calls"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// \u2705 Good - Production-safe by default\nMap<String, Object> data = Api.get("https://api.example.com/data")\n    .execute()\n    .toMap();\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Create separate clients for different APIs"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// \u2705 Good - Different clients for different needs\nApiClient externalAPI = new ApiClient.Builder()\n    .connectTimeout(Duration.ofSeconds(30))\n    .allowLocalhost(false)  // Production-safe\n    .build();\n\nApiClient internalAPI = new ApiClient.Builder()\n    .allowLocalhost(true)   // Development-friendly\n    .connectTimeout(Duration.ofSeconds(5))\n    .build();\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Configure security explicitly per client"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// \u2705 Good - Explicit security configuration\nApiClient prodClient = new ApiClient.Builder()\n    .allowLocalhost(false)  // Production-safe\n    .build();\n\nApiClient devClient = new ApiClient.Builder()\n    .allowLocalhost(true)   // Development-friendly\n    .build();\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use dependency injection for client management"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// \u2705 Good - Spring Boot example\n@Configuration\npublic class ApiConfig {\n    @Bean\n    public ApiClient externalApiClient() {\n        return new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(10))\n            .allowLocalhost(false)\n            .build();\n    }\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"-dont",children:"\u274c DON'T"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Try to shutdown the library (not needed)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// \u274c Bad - v1.0.0 doesn't have shutdown\n// Api.shutdown();  // This method doesn't exist\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Worry about resource cleanup (library is stateless)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// \u274c Bad - No cleanup needed\n// client.cleanup();  // Not needed - library is stateless\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Share clients unless thread-safety is guaranteed"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// \u274c Bad - Sharing mutable clients\n// private static ApiClient sharedClient;  // Don't share mutable state\n\n// \u2705 Good - Each service has its own client\npublic class UserService {\n    private final ApiClient client;  // Instance variable, not static\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use global configuration (removed in v1.0.0)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// \u274c Bad - Global configuration removed\n// Utils.setDefaultSecurityConfig(config);  // This method doesn't exist\n\n// \u2705 Good - Per-client configuration\nApiClient client = new ApiClient.Builder()\n    .allowLocalhost(true)\n    .build();\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"configuration-examples",children:"Configuration Examples"}),"\n",(0,r.jsx)(n.h4,{id:"production-configuration",children:"Production Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'ApiClient prodClient = new ApiClient.Builder()\n    .connectTimeout(Duration.ofSeconds(10))\n    .readTimeout(Duration.ofSeconds(30))\n    .enableRetry()\n    .allowLocalhost(false)  // Production-safe\n    .requestInterceptor(req -> {\n        req.header("Authorization", "Bearer " + getToken());\n        req.header("User-Agent", "MyApp/1.0");\n        return req;\n    })\n    .responseInterceptor(resp -> {\n        if (resp.code() >= 400) {\n            logError("API Error", resp.code(), resp.body());\n        }\n        return resp;\n    })\n    .build();\n'})}),"\n",(0,r.jsx)(n.h4,{id:"development-configuration",children:"Development Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"ApiClient devClient = new ApiClient.Builder()\n    .connectTimeout(Duration.ofSeconds(5))\n    .readTimeout(Duration.ofSeconds(15))\n    .allowLocalhost(true)  // Allow localhost\n    .enableLogging()\n    .build();\n"})}),"\n",(0,r.jsx)(n.h4,{id:"test-configuration",children:"Test Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"ApiClient testClient = new ApiClient.Builder()\n    .connectTimeout(Duration.ofSeconds(1))\n    .readTimeout(Duration.ofSeconds(5))\n    .allowLocalhost(true)\n    .build();\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-configuration-checklist",children:"\u2705 Configuration Checklist"}),"\n",(0,r.jsx)(n.h3,{id:"timeout-configuration",children:"Timeout Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"ApiClient client = new ApiClient.Builder()\n    // \u2705 Set appropriate timeouts\n    .connectTimeout(Duration.ofSeconds(10))    // Connection establishment\n    .readTimeout(Duration.ofSeconds(30))       // Response reading\n    .writeTimeout(Duration.ofSeconds(15))      // Request writing\n    .build();\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why:"})," Prevents hanging requests and resource exhaustion."]}),"\n",(0,r.jsx)(n.h3,{id:"connection-pooling",children:"Connection Pooling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// \u2705 Connection pooling is handled automatically by Java HttpClient\n// No configuration needed - the underlying HttpClient manages connections efficiently\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why:"})," Java HttpClient automatically handles connection pooling, reducing latency and improving throughput."]}),"\n",(0,r.jsx)(n.h3,{id:"security-configuration",children:"Security Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"ApiClient client = new ApiClient.Builder()\n    // \u2705 Use production-safe security settings (blocks localhost by default)\n    .allowLocalhost(false)  // Block localhost URLs in production\n    .build();\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why:"})," Prevents SSRF attacks by blocking localhost and private IP access."]}),"\n",(0,r.jsx)(n.h3,{id:"retry-configuration",children:"Retry Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"ApiClient client = new ApiClient.Builder()\n    // \u2705 Enable simple retry for transient failures\n    .enableRetry()  // 3 attempts with 1-second delay\n    // Or customize:\n    .enableRetry(5, Duration.ofSeconds(2))  // 5 attempts with 2-second delay\n    .build();\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why:"})," Handles temporary network issues and server errors automatically."]}),"\n",(0,r.jsx)(n.h3,{id:"resource-management",children:"Resource Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// \u2705 Always use try-with-resources for streams\ntry (ManagedInputStream stream = client.get(url).downloadStream()) {\n    byte[] data = stream.readAllBytes();\n    // Process data\n} // Stream is automatically closed\n\n// \u2705 For development, allow localhost access\nApiClient devClient = new ApiClient.Builder()\n    .allowLocalhost(true)\n    .build();\n\n// \u2705 For production, use strict security\nApiClient prodClient = new ApiClient.Builder()\n    .allowLocalhost(false)\n    .build();\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why:"})," Prevents memory leaks and ensures proper resource cleanup."]}),"\n",(0,r.jsx)(n.h2,{id:"-error-handling-checklist",children:"\u2705 Error Handling Checklist"}),"\n",(0,r.jsx)(n.h3,{id:"comprehensive-exception-handling",children:"Comprehensive Exception Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class ApiService {\n    private final ApiClient client;\n    \n    public User getUser(String id) {\n        try {\n            return client.get("/api/users/" + id)\n                .execute()\n                .to(User.class);\n                \n        } catch (ApiException e) {\n            // \u2705 Handle HTTP errors appropriately\n            switch (e.getStatusCode()) {\n                case 404:\n                    throw new UserNotFoundException("User not found: " + id);\n                case 429:\n                    throw new RateLimitExceededException("Rate limit exceeded");\n                case 500:\n                case 502:\n                case 503:\n                    throw new ServiceUnavailableException("Service temporarily unavailable");\n                default:\n                    throw new ApiErrorException("API error: " + e.getStatusCode());\n            }\n            \n        } catch (JsonException e) {\n            // \u2705 Handle JSON parsing errors\n            logger.error("Failed to parse JSON response", e);\n            throw new DataProcessingException("Invalid response format");\n            \n        } catch (Exception e) {\n            // \u2705 Handle unexpected errors\n            logger.error("Unexpected error in getUser", e);\n            throw new ServiceException("Internal error");\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"graceful-degradation",children:"Graceful Degradation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class ResilientApiService {\n    private final ApiClient primaryClient;\n    private final ApiClient fallbackClient;\n    \n    public User getUser(String id) {\n        try {\n            // \u2705 Try primary service first\n            return primaryClient.get("/api/users/" + id)\n                .execute()\n                .to(User.class);\n                \n        } catch (ApiException e) {\n            if (e.getStatusCode() >= 500) {\n                // \u2705 Fallback to secondary service\n                logger.warn("Primary service failed, using fallback", e);\n                return fallbackClient.get("/api/users/" + id)\n                    .execute()\n                    .to(User.class);\n            }\n            throw e;\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-logging-configuration",children:"\u2705 Logging Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"requestresponse-logging",children:"Request/Response Logging"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"ApiClient client = new ApiClient.Builder()\n    // \u2705 Enable structured logging\n    .enableLogging()\n    .build();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-logging-interceptors",children:"Custom Logging Interceptors"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// \u2705 Custom logging for production monitoring\nRequestInterceptor requestLogger = request -> {\n    logger.info("API Request: {} {}", request.getMethod(), request.getUrl());\n    return request.header("X-Request-ID", UUID.randomUUID().toString());\n};\n\nResponseInterceptor responseLogger = response -> {\n    logger.info("API Response: {} - {}ms", \n        response.code(), \n        response.getDuration().toMillis());\n    return response;\n};\n\nApiClient client = new ApiClient.Builder()\n    .addRequestInterceptor(requestLogger)\n    .addResponseInterceptor(responseLogger)\n    .build();\n'})}),"\n",(0,r.jsx)(n.h3,{id:"log-levels",children:"Log Levels"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# logback.xml or application.yml\nlogging:\n  level:\n    io.mochaapi.client: INFO      # \u2705 Production level\n    # io.mochaapi.client: DEBUG   # \u274c Only for debugging\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-security-checklist",children:"\u2705 Security Checklist"}),"\n",(0,r.jsx)(n.h3,{id:"authentication",children:"Authentication"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"ApiClient client = new ApiClient.Builder()\n    // \u2705 Use secure authentication\n    .addRequestInterceptor(RequestInterceptor.bearerAuth(() -> getSecureToken()))\n    .build();\n\n// \u2705 Token refresh mechanism\nprivate String getSecureToken() {\n    if (token == null || token.isExpired()) {\n        token = refreshToken();\n    }\n    return token.getValue();\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"url-validation",children:"URL Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// \u2705 MochaJSON automatically validates URLs\n// These will throw IllegalArgumentException:\n// client.get("javascript:alert(\'xss\')").execute();  // \u274c Rejected\n// client.get("file:///etc/passwd").execute();      // \u274c Rejected\n\n// \u2705 Only these are allowed:\nclient.get("https://api.example.com/data").execute();  // \u2705 OK\nclient.get("http://localhost:8080/api").execute();     // \u2705 OK (local)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"input-sanitization",children:"Input Sanitization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public User getUser(String id) {\n    // \u2705 Validate and sanitize input\n    if (id == null || id.trim().isEmpty()) {\n        throw new IllegalArgumentException("User ID cannot be null or empty");\n    }\n    \n    // \u2705 Sanitize the ID\n    String sanitizedId = id.trim().replaceAll("[^a-zA-Z0-9-_]", "");\n    \n    return client.get("/api/users/" + sanitizedId)\n        .execute()\n        .to(User.class);\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-performance-checklist",children:"\u2705 Performance Checklist"}),"\n",(0,r.jsx)(n.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"ApiClient client = new ApiClient.Builder()\n    // \u2705 Enable logging for performance monitoring\n    .enableLogging()\n    .build();\n"})}),"\n",(0,r.jsx)(n.h3,{id:"async-operations",children:"Async Operations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// \u2705 Use async for non-blocking operations\npublic CompletableFuture<List<User>> getUsersAsync() {\n    return client.get("/api/users")\n        .executeAsync()\n        .thenApply(response -> response.toList());\n}\n\n// \u2705 Proper exception handling in async\npublic CompletableFuture<User> getUserAsync(String id) {\n    return client.get("/api/users/" + id)\n        .executeAsync()\n        .thenApply(response -> response.to(User.class))\n        .exceptionally(throwable -> {\n            logger.error("Failed to get user: " + id, throwable);\n            return null; // or handle gracefully\n        });\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"resource-management-1",children:"Resource Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class UserService {\n    // \u2705 Singleton pattern for client reuse\n    private static final ApiClient client = new ApiClient.Builder()\n        .enableRetry()\n        .enableLogging()\n        .build();\n    \n    // \u2705 Don\'t create new clients for each request\n    public User getUser(String id) {\n        return client.get("/api/users/" + id)\n            .execute()\n            .to(User.class);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-monitoring-checklist",children:"\u2705 Monitoring Checklist"}),"\n",(0,r.jsx)(n.h3,{id:"health-checks",children:"Health Checks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@RestController\npublic class HealthController {\n    \n    private final ApiClient client;\n    \n    @GetMapping("/health/api")\n    public ResponseEntity<Map<String, Object>> checkApiHealth() {\n        try {\n            // \u2705 Check external API health\n            ApiResponse response = client.get("/api/health")\n                .timeout(Duration.ofSeconds(5))\n                .execute();\n            \n            Map<String, Object> health = Map.of(\n                "status", response.isSuccess() ? "UP" : "DOWN",\n                "responseTime", response.getDuration().toMillis(),\n                "statusCode", response.code()\n            );\n            \n            return ResponseEntity.ok(health);\n            \n        } catch (Exception e) {\n            Map<String, Object> health = Map.of(\n                "status", "DOWN",\n                "error", e.getMessage()\n            );\n            return ResponseEntity.status(503).body(health);\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"metrics-collection",children:"Metrics Collection"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// \u2705 Collect metrics for monitoring\npublic class MetricsInterceptor implements ResponseInterceptor {\n    \n    private final MeterRegistry meterRegistry;\n    \n    @Override\n    public ApiResponse intercept(ApiResponse response) {\n        // \u2705 Record response metrics\n        Timer.Sample sample = Timer.start(meterRegistry);\n        sample.stop(Timer.builder("api.requests")\n            .tag("status", String.valueOf(response.code()))\n            .register(meterRegistry));\n            \n        return response;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-testing-checklist",children:"\u2705 Testing Checklist"}),"\n",(0,r.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testGetUser_Success() {\n    // \u2705 Test successful scenarios\n    User user = userService.getUser("123");\n    assertThat(user).isNotNull();\n    assertThat(user.getId()).isEqualTo("123");\n}\n\n@Test\npublic void testGetUser_NotFound() {\n    // \u2705 Test error scenarios\n    assertThatThrownBy(() -> userService.getUser("nonexistent"))\n        .isInstanceOf(UserNotFoundException.class)\n        .hasMessageContaining("User not found");\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testApiIntegration() {\n    // \u2705 Test with real API endpoints\n    ApiResponse response = client.get("https://httpbin.org/get")\n        .execute();\n        \n    assertThat(response.isSuccess()).isTrue();\n    assertThat(response.code()).isEqualTo(200);\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-deployment-checklist",children:"\u2705 Deployment Checklist"}),"\n",(0,r.jsx)(n.h3,{id:"environment-configuration",children:"Environment Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Configuration\npublic class ApiClientConfig {\n    \n    @Bean\n    public ApiClient apiClient(@Value("${api.base-url}") String baseUrl,\n                              @Value("${api.timeout:30}") int timeoutSeconds) {\n        return new ApiClient.Builder()\n            .baseUrl(baseUrl)\n            .connectTimeout(Duration.ofSeconds(timeoutSeconds))\n            .readTimeout(Duration.ofSeconds(timeoutSeconds))\n            .enableConnectionPooling()\n            .enableRetryPolicy()\n            .enableCircuitBreaker()\n            .enableLogging()\n            .build();\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"configuration-properties",children:"Configuration Properties"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# application.yml\napi:\n  base-url: https://api.production.com\n  timeout: 30\n  \nlogging:\n  level:\n    io.mochaapi.client: INFO\n    \nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: health,metrics,info\n"})}),"\n",(0,r.jsx)(n.h2,{id:"-security-hardening",children:"\u2705 Security Hardening"}),"\n",(0,r.jsx)(n.h3,{id:"ssltls-configuration",children:"SSL/TLS Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// \u2705 Use HTTPS in production\nApiClient client = new ApiClient.Builder()\n    .baseUrl("https://api.example.com")  // \u2705 HTTPS only\n    .build();\n\n// \u274c Never use HTTP in production\n// .baseUrl("http://api.example.com")\n'})}),"\n",(0,r.jsx)(n.h3,{id:"secrets-management",children:"Secrets Management"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// \u2705 Use environment variables or secret management\n@Value("${api.token}")\nprivate String apiToken;\n\nApiClient client = new ApiClient.Builder()\n    .addRequestInterceptor(RequestInterceptor.bearerAuth(() -> apiToken))\n    .build();\n\n// \u274c Never hardcode secrets\n// .addRequestInterceptor(RequestInterceptor.bearerAuth(() -> "hardcoded-token"))\n'})}),"\n",(0,r.jsx)(n.h2,{id:"-performance-tuning",children:"\u2705 Performance Tuning"}),"\n",(0,r.jsx)(n.h3,{id:"performance-tuning",children:"Performance Tuning"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"ApiClient client = new ApiClient.Builder()\n    // \u2705 Optimize for your workload\n    .connectTimeout(Duration.ofSeconds(10))\n    .readTimeout(Duration.ofSeconds(30))\n    .enableRetry(3, Duration.ofSeconds(1))\n    .enableLogging()\n    .build();\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Connection pooling is handled automatically by Java HttpClient - no manual configuration needed."]}),"\n",(0,r.jsx)(n.h2,{id:"-final-verification",children:"\u2705 Final Verification"}),"\n",(0,r.jsx)(n.p,{children:"Before deploying to production:"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Timeouts configured"})," - Appropriate for your network conditions"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Error handling"})," - Comprehensive exception handling implemented"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Logging enabled"})," - Structured logging with appropriate levels"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Security hardened"})," - HTTPS, input validation, secure authentication"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Performance optimized"})," - Simple retry, async operations, resource management"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Monitoring setup"})," - Health checks and metrics collection"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Tests passing"})," - Unit and integration tests cover critical paths"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Documentation updated"})," - API documentation and runbooks current"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/MochaJSON/best-practices/common-mistakes",children:"Common Mistakes"})})," - What to avoid in production"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/MochaJSON/best-practices/performance-tips",children:"Performance Tips"})})," - Optimize your HTTP client performance"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);