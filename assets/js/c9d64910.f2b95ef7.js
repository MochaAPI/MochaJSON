"use strict";(globalThis.webpackChunkmochaapi_client_docs=globalThis.webpackChunkmochaapi_client_docs||[]).push([[839],{8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var t=i(6540);const l={},r=t.createContext(l);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),t.createElement(r.Provider,{value:n},e.children)}},8758:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"library-vs-framework","title":"Library vs Framework: Why MochaJSON is 1000% Library","description":"Understanding the philosophy behind MochaJSON v1.0.0\'s pure library design and why it\'s better than framework-like approaches.","source":"@site/docs/library-vs-framework.md","sourceDirName":".","slug":"/library-vs-framework","permalink":"/MochaJSON/library-vs-framework","draft":false,"unlisted":false,"editUrl":"https://github.com/MochaAPI/MochaJSON/tree/main/docs/docs/library-vs-framework.md","tags":[],"version":"current","frontMatter":{"title":"Library vs Framework: Why MochaJSON is 1000% Library","description":"Understanding the philosophy behind MochaJSON v1.0.0\'s pure library design and why it\'s better than framework-like approaches.","keywords":["library vs framework","stateless design","MochaJSON philosophy","pure library","HTTP client design"]},"sidebar":"tutorialSidebar","previous":{"title":"\u2696\ufe0f vs Alternatives","permalink":"/MochaJSON/comparison"},"next":{"title":"Java Examples","permalink":"/MochaJSON/usage/java-examples"}}');var l=i(4848),r=i(8453);const a={title:"Library vs Framework: Why MochaJSON is 1000% Library",description:"Understanding the philosophy behind MochaJSON v1.0.0's pure library design and why it's better than framework-like approaches.",keywords:["library vs framework","stateless design","MochaJSON philosophy","pure library","HTTP client design"]},s="Library vs Framework: Why MochaJSON is 1000% Library",o={},c=[{value:"The Philosophy",id:"the-philosophy",level:2},{value:"Library Characteristics \u2705",id:"library-characteristics-",level:2},{value:"1. No Lifecycle Management",id:"1-no-lifecycle-management",level:3},{value:"2. No Global State",id:"2-no-global-state",level:3},{value:"3. Explicit Configuration",id:"3-explicit-configuration",level:3},{value:"4. User Controls Everything",id:"4-user-controls-everything",level:3},{value:"Framework Anti-Patterns \u274c (Removed in v1.0.0)",id:"framework-anti-patterns--removed-in-v100",level:2},{value:"\u274c Lifecycle Hooks (REMOVED)",id:"-lifecycle-hooks-removed",level:3},{value:"\u274c Global Configuration (REMOVED)",id:"-global-configuration-removed",level:3},{value:"\u274c Hidden State Management (REMOVED)",id:"-hidden-state-management-removed",level:3},{value:"Benefits of Library Design",id:"benefits-of-library-design",level:2},{value:"1. Predictability",id:"1-predictability",level:3},{value:"2. Testability",id:"2-testability",level:3},{value:"3. Flexibility",id:"3-flexibility",level:3},{value:"4. Simplicity",id:"4-simplicity",level:3},{value:"5. Integration",id:"5-integration",level:3},{value:"Real-World Comparison",id:"real-world-comparison",level:2},{value:"Spring Boot Integration",id:"spring-boot-integration",level:3},{value:"Micronaut Integration",id:"micronaut-integration",level:3},{value:"Standalone Application",id:"standalone-application",level:3},{value:"Testing Benefits",id:"testing-benefits",level:2},{value:"Easy Unit Testing",id:"easy-unit-testing",level:3},{value:"Easy Integration Testing",id:"easy-integration-testing",level:3},{value:"Easy Mocking",id:"easy-mocking",level:3},{value:"Performance Benefits",id:"performance-benefits",level:2},{value:"No Global State Overhead",id:"no-global-state-overhead",level:3},{value:"Better Memory Management",id:"better-memory-management",level:3},{value:"Thread Safety",id:"thread-safety",level:3},{value:"Migration from Framework-like Libraries",id:"migration-from-framework-like-libraries",level:2},{value:"From OkHttp (Framework-like)",id:"from-okhttp-framework-like",level:3},{value:"From Retrofit (Framework-like)",id:"from-retrofit-framework-like",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Create Clients as Needed",id:"1-create-clients-as-needed",level:3},{value:"2. Use Dependency Injection",id:"2-use-dependency-injection",level:3},{value:"3. Configure Per Environment",id:"3-configure-per-environment",level:3},{value:"Summary",id:"summary",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"library-vs-framework-why-mochajson-is-1000-library",children:"Library vs Framework: Why MochaJSON is 1000% Library"})}),"\n",(0,l.jsx)(n.h2,{id:"the-philosophy",children:"The Philosophy"}),"\n",(0,l.jsxs)(n.p,{children:["MochaJSON is designed as a ",(0,l.jsx)(n.strong,{children:"pure library"}),", not a framework. This distinction is crucial for understanding how to use it effectively and why it's better than framework-like approaches."]}),"\n",(0,l.jsx)(n.h2,{id:"library-characteristics-",children:"Library Characteristics \u2705"}),"\n",(0,l.jsx)(n.h3,{id:"1-no-lifecycle-management",children:"1. No Lifecycle Management"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'// \u2705 Just use it - no initialization or shutdown\nMap<String, Object> data = Api.get("https://api.example.com/data")\n    .execute()\n    .toMap();\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"What this means:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["No ",(0,l.jsx)(n.code,{children:"init()"})," or ",(0,l.jsx)(n.code,{children:"startup()"})," methods"]}),"\n",(0,l.jsxs)(n.li,{children:["No ",(0,l.jsx)(n.code,{children:"shutdown()"})," or ",(0,l.jsx)(n.code,{children:"cleanup()"})," methods"]}),"\n",(0,l.jsx)(n.li,{children:"No application lifecycle hooks"}),"\n",(0,l.jsx)(n.li,{children:"Just import and use"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"2-no-global-state",children:"2. No Global State"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"// \u2705 Each client is independent\nApiClient client1 = new ApiClient.Builder().build();\nApiClient client2 = new ApiClient.Builder().build();\n// No conflicts, no shared state\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"What this means:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"No global configuration"}),"\n",(0,l.jsx)(n.li,{children:"No shared mutable state"}),"\n",(0,l.jsx)(n.li,{children:"Each client is completely isolated"}),"\n",(0,l.jsx)(n.li,{children:"Thread-safe by design"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"3-explicit-configuration",children:"3. Explicit Configuration"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"// \u2705 Configuration is per-client, explicit\nApiClient client = new ApiClient.Builder()\n    .allowLocalhost(true)\n    .connectTimeout(Duration.ofSeconds(10))\n    .build();\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"What this means:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"All configuration is explicit"}),"\n",(0,l.jsx)(n.li,{children:"No hidden defaults or magic"}),"\n",(0,l.jsx)(n.li,{children:"Configuration is per-instance"}),"\n",(0,l.jsx)(n.li,{children:"Clear ownership of settings"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"4-user-controls-everything",children:"4. User Controls Everything"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"// \u2705 You decide when to create, use, and discard\nvoid processRequests() {\n    ApiClient client = new ApiClient.Builder().build();\n    // Use client\n    // No cleanup needed - client is stateless\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"What this means:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"You control object lifecycle"}),"\n",(0,l.jsx)(n.li,{children:"You control resource management"}),"\n",(0,l.jsx)(n.li,{children:"You control when things happen"}),"\n",(0,l.jsx)(n.li,{children:"No hidden dependencies"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"framework-anti-patterns--removed-in-v100",children:"Framework Anti-Patterns \u274c (Removed in v1.0.0)"}),"\n",(0,l.jsx)(n.h3,{id:"-lifecycle-hooks-removed",children:"\u274c Lifecycle Hooks (REMOVED)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"// \u274c v1.0.0 had this (removed in v1.0.0)\nRuntime.getRuntime().addShutdownHook(...);\nApi.shutdown();\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Why this was bad:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Libraries shouldn't manage application lifecycle"}),"\n",(0,l.jsx)(n.li,{children:"Creates hidden dependencies"}),"\n",(0,l.jsx)(n.li,{children:"Makes testing harder"}),"\n",(0,l.jsx)(n.li,{children:"Violates single responsibility principle"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"-global-configuration-removed",children:"\u274c Global Configuration (REMOVED)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"// \u274c v1.0.0 had this (removed in v1.0.0)\nUtils.setDefaultSecurityConfig(config);\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Why this was bad:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Global state is hard to reason about"}),"\n",(0,l.jsx)(n.li,{children:"Makes testing difficult"}),"\n",(0,l.jsx)(n.li,{children:"Creates hidden dependencies"}),"\n",(0,l.jsx)(n.li,{children:"Violates explicit is better than implicit"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"-hidden-state-management-removed",children:"\u274c Hidden State Management (REMOVED)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"// \u274c v1.0.0 tracked state (removed in v1.0.0)\nif (Api.isShutdown()) { ... }\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Why this was bad:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Hidden state is unpredictable"}),"\n",(0,l.jsx)(n.li,{children:"Makes debugging difficult"}),"\n",(0,l.jsx)(n.li,{children:"Creates race conditions"}),"\n",(0,l.jsx)(n.li,{children:"Violates transparency principle"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"benefits-of-library-design",children:"Benefits of Library Design"}),"\n",(0,l.jsx)(n.h3,{id:"1-predictability",children:"1. Predictability"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"No surprise side effects or hidden state changes."})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"// \u2705 Predictable behavior\nApiClient client1 = new ApiClient.Builder().build();\nApiClient client2 = new ApiClient.Builder().build();\n\n// These are completely independent\nMap<String, Object> data1 = client1.get(url1).execute().toMap();\nMap<String, Object> data2 = client2.get(url2).execute().toMap();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"2-testability",children:"2. Testability"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Easy to mock and test because each client is independent."})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testApiCall() {\n    // \u2705 Easy to test - no global state to worry about\n    ApiClient client = new ApiClient.Builder()\n        .allowLocalhost(true)\n        .build();\n    \n    Map<String, Object> result = client.get("http://localhost:8080/test")\n        .execute()\n        .toMap();\n    \n    assertNotNull(result);\n    // No cleanup needed\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"3-flexibility",children:"3. Flexibility"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Use multiple clients with different configurations."})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"// \u2705 Different configurations for different needs\nApiClient externalAPI = new ApiClient.Builder()\n    .connectTimeout(Duration.ofSeconds(30))\n    .allowLocalhost(false)  // Production-safe\n    .build();\n\nApiClient internalAPI = new ApiClient.Builder()\n    .allowLocalhost(true)   // Development-friendly\n    .connectTimeout(Duration.ofSeconds(5))\n    .build();\n\nApiClient testAPI = new ApiClient.Builder()\n    .allowLocalhost(true)\n    .connectTimeout(Duration.ofSeconds(1))\n    .build();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"4-simplicity",children:"4. Simplicity"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"No complex lifecycle to understand or manage."})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'// \u2705 Simple and straightforward\npublic class UserService {\n    private final ApiClient client;\n    \n    public UserService() {\n        this.client = new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(10))\n            .build();\n    }\n    \n    public User getUser(int id) {\n        return client.get("https://api.example.com/users/" + id)\n            .execute()\n            .to(User.class);\n    }\n    \n    // No cleanup method needed\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"5-integration",children:"5. Integration"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Works seamlessly with any framework or architecture."})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'// \u2705 Works with Spring Boot\n@Configuration\npublic class ApiConfig {\n    @Bean\n    public ApiClient externalApiClient() {\n        return new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(10))\n            .build();\n    }\n    \n    @Bean\n    public ApiClient internalApiClient() {\n        return new ApiClient.Builder()\n            .allowLocalhost(true)\n            .build();\n    }\n}\n\n// \u2705 Works standalone\npublic class Main {\n    public static void main(String[] args) {\n        Map<String, Object> data = Api.get("https://api.example.com/data")\n            .execute()\n            .toMap();\n        System.out.println(data);\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"real-world-comparison",children:"Real-World Comparison"}),"\n",(0,l.jsx)(n.h3,{id:"spring-boot-integration",children:"Spring Boot Integration"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'@Configuration\npublic class ApiConfig {\n    @Bean\n    @Primary\n    public ApiClient externalApiClient() {\n        return new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(10))\n            .allowLocalhost(false)  // Production-safe\n            .requestInterceptor(req -> {\n                req.header("Authorization", "Bearer " + getExternalToken());\n                return req;\n            })\n            .build();\n    }\n    \n    @Bean\n    public ApiClient internalApiClient() {\n        return new ApiClient.Builder()\n            .allowLocalhost(true)   // Development-friendly\n            .connectTimeout(Duration.ofSeconds(5))\n            .requestInterceptor(req -> {\n                req.header("Authorization", "Bearer " + getInternalToken());\n                return req;\n            })\n            .build();\n    }\n}\n\n@Service\npublic class UserService {\n    private final ApiClient externalClient;\n    private final ApiClient internalClient;\n    \n    public UserService(ApiClient externalApiClient, ApiClient internalApiClient) {\n        this.externalClient = externalApiClient;\n        this.internalClient = internalApiClient;\n    }\n    \n    public User getExternalUser(int id) {\n        return externalClient.get("https://api.external.com/users/" + id)\n            .execute()\n            .to(User.class);\n    }\n    \n    public User getInternalUser(int id) {\n        return internalClient.get("http://localhost:8080/users/" + id)\n            .execute()\n            .to(User.class);\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"micronaut-integration",children:"Micronaut Integration"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'@Factory\npublic class ApiClientFactory {\n    @Bean\n    @Singleton\n    public ApiClient externalApiClient() {\n        return new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(10))\n            .build();\n    }\n    \n    @Bean\n    @Singleton\n    public ApiClient internalApiClient() {\n        return new ApiClient.Builder()\n            .allowLocalhost(true)\n            .build();\n    }\n}\n\n@Controller("/api")\npublic class ApiController {\n    private final ApiClient externalClient;\n    private final ApiClient internalClient;\n    \n    public ApiController(ApiClient externalApiClient, ApiClient internalApiClient) {\n        this.externalClient = externalApiClient;\n        this.internalClient = internalApiClient;\n    }\n    \n    @Get("/external/{id}")\n    public User getExternalUser(int id) {\n        return externalClient.get("https://api.external.com/users/" + id)\n            .execute()\n            .to(User.class);\n    }\n    \n    @Get("/internal/{id}")\n    public User getInternalUser(int id) {\n        return internalClient.get("http://localhost:8080/users/" + id)\n            .execute()\n            .to(User.class);\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"standalone-application",children:"Standalone Application"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'public class Main {\n    public static void main(String[] args) {\n        // \u2705 No framework needed\n        Map<String, Object> data = Api.get("https://api.example.com/data")\n            .execute()\n            .toMap();\n        \n        System.out.println("Data: " + data);\n        \n        // \u2705 Or use configured client\n        ApiClient client = new ApiClient.Builder()\n            .allowLocalhost(true)\n            .connectTimeout(Duration.ofSeconds(10))\n            .build();\n        \n        User user = client.get("http://localhost:8080/users/1")\n            .execute()\n            .to(User.class);\n        \n        System.out.println("User: " + user.name);\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"testing-benefits",children:"Testing Benefits"}),"\n",(0,l.jsx)(n.h3,{id:"easy-unit-testing",children:"Easy Unit Testing"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"public class UserServiceTest {\n    @Test\n    public void testGetUser() {\n        // \u2705 Easy to test - no global state\n        ApiClient client = new ApiClient.Builder()\n            .allowLocalhost(true)\n            .build();\n        \n        UserService service = new UserService(client);\n        User user = service.getUser(1);\n        \n        assertNotNull(user);\n        assertEquals(1, user.id);\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"easy-integration-testing",children:"Easy Integration Testing"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"@SpringBootTest\npublic class UserServiceIntegrationTest {\n    @Autowired\n    private UserService userService;\n    \n    @Test\n    public void testGetUser() {\n        // \u2705 Works with Spring Boot testing\n        User user = userService.getUser(1);\n        \n        assertNotNull(user);\n        assertEquals(1, user.id);\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"easy-mocking",children:"Easy Mocking"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"@Test\npublic void testWithMockClient() {\n    // \u2705 Easy to mock - no global state\n    ApiClient mockClient = mock(ApiClient.class);\n    when(mockClient.get(anyString())).thenReturn(mockRequest);\n    \n    UserService service = new UserService(mockClient);\n    // Test with mocked client\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"performance-benefits",children:"Performance Benefits"}),"\n",(0,l.jsx)(n.h3,{id:"no-global-state-overhead",children:"No Global State Overhead"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"// \u2705 No global state to manage\nApiClient client1 = new ApiClient.Builder().build();\nApiClient client2 = new ApiClient.Builder().build();\n// Each client is independent and efficient\n"})}),"\n",(0,l.jsx)(n.h3,{id:"better-memory-management",children:"Better Memory Management"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"// \u2705 Clients can be garbage collected when not needed\nvoid processRequests() {\n    ApiClient client = new ApiClient.Builder().build();\n    // Use client\n    // Client is automatically cleaned up when method ends\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"thread-safety",children:"Thread Safety"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"// \u2705 Thread-safe by design\nCompletableFuture<Map<String, Object>> future1 = client1.get(url1).executeAsync();\nCompletableFuture<Map<String, Object>> future2 = client2.get(url2).executeAsync();\n// No shared state, no race conditions\n"})}),"\n",(0,l.jsx)(n.h2,{id:"migration-from-framework-like-libraries",children:"Migration from Framework-like Libraries"}),"\n",(0,l.jsx)(n.h3,{id:"from-okhttp-framework-like",children:"From OkHttp (Framework-like)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'// \u274c OkHttp (framework-like)\nOkHttpClient client = new OkHttpClient.Builder()\n    .connectTimeout(10, TimeUnit.SECONDS)\n    .build();\n\nRequest request = new Request.Builder()\n    .url("https://api.example.com/data")\n    .build();\n\nResponse response = client.newCall(request).execute();\nString json = response.body().string();\n// Manual JSON parsing needed\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'// \u2705 MochaJSON (pure library)\nMap<String, Object> data = Api.get("https://api.example.com/data")\n    .execute()\n    .toMap();\n// Automatic JSON parsing\n'})}),"\n",(0,l.jsx)(n.h3,{id:"from-retrofit-framework-like",children:"From Retrofit (Framework-like)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'// \u274c Retrofit (framework-like)\npublic interface ApiService {\n    @GET("users/{id}")\n    Call<User> getUser(@Path("id") int id);\n}\n\nRetrofit retrofit = new Retrofit.Builder()\n    .baseUrl("https://api.example.com/")\n    .addConverterFactory(GsonConverterFactory.create())\n    .build();\n\nApiService service = retrofit.create(ApiService.class);\nCall<User> call = service.getUser(1);\nUser user = call.execute().body();\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'// \u2705 MochaJSON (pure library)\nApiClient client = new ApiClient.Builder().build();\nUser user = client.get("https://api.example.com/users/1")\n    .execute()\n    .to(User.class);\n'})}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsx)(n.h3,{id:"1-create-clients-as-needed",children:"1. Create Clients as Needed"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'// \u2705 Create clients when you need them\npublic class DataService {\n    private final ApiClient client;\n    \n    public DataService() {\n        this.client = new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(10))\n            .build();\n    }\n    \n    public Data getData(String id) {\n        return client.get("https://api.example.com/data/" + id)\n            .execute()\n            .to(Data.class);\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h3,{id:"2-use-dependency-injection",children:"2. Use Dependency Injection"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:"// \u2705 Inject clients for better testability\n@Service\npublic class UserService {\n    private final ApiClient externalClient;\n    private final ApiClient internalClient;\n    \n    public UserService(ApiClient externalClient, ApiClient internalClient) {\n        this.externalClient = externalClient;\n        this.internalClient = internalClient;\n    }\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"3-configure-per-environment",children:"3. Configure Per Environment"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'// \u2705 Different configurations for different environments\n@Configuration\npublic class ApiConfig {\n    @Bean\n    @Profile("production")\n    public ApiClient productionClient() {\n        return new ApiClient.Builder()\n            .allowLocalhost(false)\n            .connectTimeout(Duration.ofSeconds(30))\n            .build();\n    }\n    \n    @Bean\n    @Profile("development")\n    public ApiClient developmentClient() {\n        return new ApiClient.Builder()\n            .allowLocalhost(true)\n            .connectTimeout(Duration.ofSeconds(5))\n            .enableLogging()\n            .build();\n    }\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,l.jsxs)(n.p,{children:["MochaJSON v1.0.0 is a ",(0,l.jsx)(n.strong,{children:"pure library"})," because it:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["\u2705 ",(0,l.jsx)(n.strong,{children:"No Lifecycle Management"})," - Just use it"]}),"\n",(0,l.jsxs)(n.li,{children:["\u2705 ",(0,l.jsx)(n.strong,{children:"No Global State"})," - Each client is independent"]}),"\n",(0,l.jsxs)(n.li,{children:["\u2705 ",(0,l.jsx)(n.strong,{children:"Explicit Configuration"})," - All settings are per-client"]}),"\n",(0,l.jsxs)(n.li,{children:["\u2705 ",(0,l.jsx)(n.strong,{children:"User Control"})," - You decide when to create and use clients"]}),"\n",(0,l.jsxs)(n.li,{children:["\u2705 ",(0,l.jsx)(n.strong,{children:"Predictable"})," - No hidden side effects"]}),"\n",(0,l.jsxs)(n.li,{children:["\u2705 ",(0,l.jsx)(n.strong,{children:"Testable"})," - Easy to mock and test"]}),"\n",(0,l.jsxs)(n.li,{children:["\u2705 ",(0,l.jsx)(n.strong,{children:"Flexible"})," - Multiple clients with different configs"]}),"\n",(0,l.jsxs)(n.li,{children:["\u2705 ",(0,l.jsx)(n.strong,{children:"Simple"})," - No complex lifecycle to manage"]}),"\n",(0,l.jsxs)(n.li,{children:["\u2705 ",(0,l.jsx)(n.strong,{children:"Framework Agnostic"})," - Works with any architecture"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"This makes MochaJSON more reliable, testable, and easier to use than framework-like HTTP clients. You get all the power of a modern HTTP client without the complexity of lifecycle management or global state."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);