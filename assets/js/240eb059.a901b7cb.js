"use strict";(globalThis.webpackChunkmochaapi_client_docs=globalThis.webpackChunkmochaapi_client_docs||[]).push([[416],{6879:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"examples/production-ready","title":"Production-Ready Examples","description":"Production-grade patterns for MochaJSON v1.0.0 with proper error handling, timeouts, retry, and security.","source":"@site/docs/examples/production-ready.md","sourceDirName":"examples","slug":"/examples/production-ready","permalink":"/MochaJSON/examples/production-ready","draft":false,"unlisted":false,"editUrl":"https://github.com/MochaAPI/MochaJSON/tree/main/docs/docs/examples/production-ready.md","tags":[],"version":"current","frontMatter":{"title":"Production-Ready Examples","description":"Production-grade patterns for MochaJSON v1.0.0 with proper error handling, timeouts, retry, and security.","keywords":["production ready","error handling","timeouts","retry","security"]}}');var i=t(4848),o=t(8453);const a={title:"Production-Ready Examples",description:"Production-grade patterns for MochaJSON v1.0.0 with proper error handling, timeouts, retry, and security.",keywords:["production ready","error handling","timeouts","retry","security"]},c="Production-Ready Examples",l={},s=[{value:"Production Service Class",id:"production-service-class",level:2},{value:"Spring Boot Integration",id:"spring-boot-integration",level:2},{value:"Configuration Management",id:"configuration-management",level:2},{value:"Error Handling Patterns",id:"error-handling-patterns",level:2},{value:"Circuit Breaker Pattern",id:"circuit-breaker-pattern",level:2},{value:"Kotlin Production Examples",id:"kotlin-production-examples",level:2},{value:"Kotlin Service Class",id:"kotlin-service-class",level:3},{value:"Kotlin Configuration Factory",id:"kotlin-configuration-factory",level:3},{value:"Key Production Principles",id:"key-production-principles",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"production-ready-examples",children:"Production-Ready Examples"})}),"\n",(0,i.jsx)(n.p,{children:"Production-grade patterns for MochaJSON v1.0.0 with proper error handling, timeouts, retry, and security."}),"\n",(0,i.jsx)(n.h2,{id:"production-service-class",children:"Production Service Class"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\nimport java.time.Duration;\nimport java.util.concurrent.CompletableFuture;\n\npublic class UserService {\n    private final ApiClient client;\n    \n    public UserService() {\n        this.client = new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(10))\n            .readTimeout(Duration.ofSeconds(30))\n            .enableRetry()                    // 3 attempts with exponential backoff\n            .requestInterceptor(req -> {\n                req.header("Authorization", "Bearer " + getToken());\n                req.header("User-Agent", "MyApp/1.0");\n                return req;\n            })\n            .responseInterceptor(resp -> {\n                if (resp.code() >= 400) {\n                    logError("API Error", resp.code(), resp.body());\n                }\n                return resp;\n            })\n            .enableLogging()\n            .build();\n    }\n    \n    public User getUser(int id) {\n        try {\n            return client.get("https://api.example.com/users/" + id)\n                .execute()\n                .to(User.class);\n        } catch (ApiException e) {\n            throw new UserServiceException("Failed to get user " + id, e);\n        } catch (JsonException e) {\n            throw new UserServiceException("Failed to parse user data", e);\n        }\n    }\n    \n    public CompletableFuture<User> getUserAsync(int id) {\n        return client.get("https://api.example.com/users/" + id)\n            .executeAsync()\n            .thenApply(response -> {\n                try {\n                    return response.to(User.class);\n                } catch (JsonException e) {\n                    throw new RuntimeException("Failed to parse user data", e);\n                }\n            })\n            .exceptionally(throwable -> {\n                logError("Async API Error", throwable);\n                throw new RuntimeException("Failed to get user " + id, throwable);\n            });\n    }\n    \n    public User createUser(User user) {\n        try {\n            return client.post("https://api.example.com/users")\n                .body(user)\n                .execute()\n                .to(User.class);\n        } catch (ApiException e) {\n            throw new UserServiceException("Failed to create user", e);\n        } catch (JsonException e) {\n            throw new UserServiceException("Failed to parse created user", e);\n        }\n    }\n    \n    private String getToken() {\n        return System.getenv("API_TOKEN");\n    }\n    \n    private void logError(String message, int statusCode, String body) {\n        System.err.println(message + ": " + statusCode + " - " + body);\n    }\n    \n    private void logError(String message, Throwable throwable) {\n        System.err.println(message + ": " + throwable.getMessage());\n    }\n    \n    public static class User {\n        public int id;\n        public String name;\n        public String email;\n        \n        public User() {}\n        \n        public User(String name, String email) {\n            this.name = name;\n            this.email = email;\n        }\n    }\n    \n    public static class UserServiceException extends RuntimeException {\n        public UserServiceException(String message, Throwable cause) {\n            super(message, cause);\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"spring-boot-integration",children:"Spring Boot Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport java.time.Duration;\n\n@Service\npublic class ExternalApiService {\n    private final ApiClient client;\n    \n    public ExternalApiService(@Value("${api.base-url}") String baseUrl,\n                             @Value("${api.token}") String token) {\n        this.client = new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(15))\n            .readTimeout(Duration.ofSeconds(60))\n            .enableRetry()\n            .requestInterceptor(req -> {\n                req.header("Authorization", "Bearer " + token);\n                req.header("Accept", "application/json");\n                return req;\n            })\n            .responseInterceptor(resp -> {\n                if (resp.code() >= 400) {\n                    // Log to your logging framework\n                    System.err.println("API Error: " + resp.code() + " - " + resp.body());\n                }\n                return resp;\n            })\n            .build();\n    }\n    \n    public ApiResponse getData(String endpoint) {\n        try {\n            return client.get(baseUrl + endpoint)\n                .execute();\n        } catch (ApiException e) {\n            throw new ExternalApiException("Failed to get data from " + endpoint, e);\n        }\n    }\n    \n    public <T> T getDataAs(String endpoint, Class<T> clazz) {\n        try {\n            return client.get(baseUrl + endpoint)\n                .execute()\n                .to(clazz);\n        } catch (ApiException e) {\n            throw new ExternalApiException("Failed to get data from " + endpoint, e);\n        } catch (JsonException e) {\n            throw new ExternalApiException("Failed to parse data from " + endpoint, e);\n        }\n    }\n    \n    private String baseUrl;\n    \n    public static class ExternalApiException extends RuntimeException {\n        public ExternalApiException(String message, Throwable cause) {\n            super(message, cause);\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\nimport java.time.Duration;\nimport java.util.Map;\n\npublic class ApiClientFactory {\n    \n    public static ApiClient createProductionClient(String token) {\n        return new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(10))\n            .readTimeout(Duration.ofSeconds(30))\n            .enableRetry()\n            .allowLocalhost(false)  // Production-safe\n            .requestInterceptor(req -> {\n                req.header("Authorization", "Bearer " + token);\n                req.header("User-Agent", "MyApp/1.0");\n                return req;\n            })\n            .build();\n    }\n    \n    public static ApiClient createDevelopmentClient() {\n        return new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(5))\n            .readTimeout(Duration.ofSeconds(15))\n            .enableRetry()\n            .allowLocalhost(true)   // Development-friendly\n            .enableLogging()\n            .build();\n    }\n    \n    public static ApiClient createTestClient() {\n        return new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(1))\n            .readTimeout(Duration.ofSeconds(5))\n            .allowLocalhost(true)\n            .build();\n    }\n    \n    public static ApiClient createFromConfig(Map<String, Object> config) {\n        ApiClient.Builder builder = new ApiClient.Builder();\n        \n        if (config.containsKey("connectTimeout")) {\n            builder.connectTimeout(Duration.ofSeconds((Integer) config.get("connectTimeout")));\n        }\n        \n        if (config.containsKey("readTimeout")) {\n            builder.readTimeout(Duration.ofSeconds((Integer) config.get("readTimeout")));\n        }\n        \n        if (config.containsKey("allowLocalhost")) {\n            builder.allowLocalhost((Boolean) config.get("allowLocalhost"));\n        }\n        \n        if (config.containsKey("enableRetry")) {\n            builder.enableRetry();\n        }\n        \n        if (config.containsKey("enableLogging")) {\n            builder.enableLogging();\n        }\n        \n        return builder.build();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"error-handling-patterns",children:"Error Handling Patterns"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\nimport java.time.Duration;\nimport java.util.concurrent.CompletableFuture;\n\npublic class RobustApiClient {\n    private final ApiClient client;\n    \n    public RobustApiClient() {\n        this.client = new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(10))\n            .readTimeout(Duration.ofSeconds(30))\n            .enableRetry()\n            .build();\n    }\n    \n    public <T> T getWithFallback(String url, Class<T> clazz, T fallback) {\n        try {\n            return client.get(url)\n                .execute()\n                .to(clazz);\n        } catch (ApiException e) {\n            System.err.println("API Error: " + e.getMessage());\n            return fallback;\n        } catch (JsonException e) {\n            System.err.println("JSON Error: " + e.getMessage());\n            return fallback;\n        }\n    }\n    \n    public <T> CompletableFuture<T> getAsyncWithFallback(String url, Class<T> clazz, T fallback) {\n        return client.get(url)\n            .executeAsync()\n            .thenApply(response -> {\n                try {\n                    return response.to(clazz);\n                } catch (JsonException e) {\n                    System.err.println("JSON Error: " + e.getMessage());\n                    return fallback;\n                }\n            })\n            .exceptionally(throwable -> {\n                System.err.println("Async Error: " + throwable.getMessage());\n                return fallback;\n            });\n    }\n    \n    public boolean isHealthy(String healthCheckUrl) {\n        try {\n            ApiResponse response = client.get(healthCheckUrl)\n                .execute();\n            return response.code() == 200;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"circuit-breaker-pattern",children:"Circuit Breaker Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'import io.mochaapi.client.*;\nimport java.time.Duration;\nimport java.util.concurrent.atomic.AtomicInteger;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class CircuitBreakerApiClient {\n    private final ApiClient client;\n    private final AtomicInteger failureCount = new AtomicInteger(0);\n    private final AtomicLong lastFailureTime = new AtomicLong(0);\n    private final int failureThreshold = 5;\n    private final long timeoutMs = 60000; // 1 minute\n    \n    public CircuitBreakerApiClient() {\n        this.client = new ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(10))\n            .readTimeout(Duration.ofSeconds(30))\n            .enableRetry()\n            .build();\n    }\n    \n    public <T> T get(String url, Class<T> clazz) {\n        if (isCircuitOpen()) {\n            throw new CircuitBreakerOpenException("Circuit breaker is open");\n        }\n        \n        try {\n            T result = client.get(url)\n                .execute()\n                .to(clazz);\n            \n            // Success - reset failure count\n            failureCount.set(0);\n            return result;\n            \n        } catch (Exception e) {\n            // Failure - increment count and record time\n            failureCount.incrementAndGet();\n            lastFailureTime.set(System.currentTimeMillis());\n            throw e;\n        }\n    }\n    \n    private boolean isCircuitOpen() {\n        if (failureCount.get() >= failureThreshold) {\n            long timeSinceLastFailure = System.currentTimeMillis() - lastFailureTime.get();\n            return timeSinceLastFailure < timeoutMs;\n        }\n        return false;\n    }\n    \n    public static class CircuitBreakerOpenException extends RuntimeException {\n        public CircuitBreakerOpenException(String message) {\n            super(message);\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"kotlin-production-examples",children:"Kotlin Production Examples"}),"\n",(0,i.jsx)(n.h3,{id:"kotlin-service-class",children:"Kotlin Service Class"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\nimport java.time.Duration\n\nclass UserService {\n    private val client = ApiClient.Builder()\n        .connectTimeout(Duration.ofSeconds(10))\n        .readTimeout(Duration.ofSeconds(30))\n        .enableRetry()\n        .requestInterceptor { req ->\n            req.header("Authorization", "Bearer ${getToken()}")\n            req.header("User-Agent", "MyApp/1.0")\n            req\n        }\n        .responseInterceptor { resp ->\n            if (resp.code() >= 400) {\n                logError("API Error", resp.code(), resp.body())\n            }\n            resp\n        }\n        .enableLogging()\n        .build()\n    \n    fun getUser(id: Int): User {\n        return try {\n            client.get("https://api.example.com/users/$id")\n                .execute()\n                .to(User::class.java)\n        } catch (e: ApiException) {\n            throw UserServiceException("Failed to get user $id", e)\n        } catch (e: JsonException) {\n            throw UserServiceException("Failed to parse user data", e)\n        }\n    }\n    \n    suspend fun getUserAsync(id: Int): User = withContext(Dispatchers.IO) {\n        try {\n            client.get("https://api.example.com/users/$id")\n                .execute()\n                .to(User::class.java)\n        } catch (e: Exception) {\n            throw UserServiceException("Failed to get user $id", e)\n        }\n    }\n    \n    private fun getToken(): String = System.getenv("API_TOKEN") ?: ""\n    \n    private fun logError(message: String, statusCode: Int, body: String) {\n        System.err.println("$message: $statusCode - $body")\n    }\n    \n    private fun logError(message: String, throwable: Throwable) {\n        System.err.println("$message: ${throwable.message}")\n    }\n}\n\ndata class User(\n    val id: Int,\n    val name: String,\n    val email: String\n)\n\nclass UserServiceException(message: String, cause: Throwable) : RuntimeException(message, cause)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"kotlin-configuration-factory",children:"Kotlin Configuration Factory"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-kotlin",children:'import io.mochaapi.client.*\nimport java.time.Duration\n\nobject ApiClientFactory {\n    \n    fun createProductionClient(token: String): ApiClient {\n        return ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(10))\n            .readTimeout(Duration.ofSeconds(30))\n            .enableRetry()\n            .allowLocalhost(false)  // Production-safe\n            .requestInterceptor { req ->\n                req.header("Authorization", "Bearer $token")\n                req.header("User-Agent", "MyApp/1.0")\n                req\n            }\n            .build()\n    }\n    \n    fun createDevelopmentClient(): ApiClient {\n        return ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(5))\n            .readTimeout(Duration.ofSeconds(15))\n            .enableRetry()\n            .allowLocalhost(true)   // Development-friendly\n            .enableLogging()\n            .build()\n    }\n    \n    fun createTestClient(): ApiClient {\n        return ApiClient.Builder()\n            .connectTimeout(Duration.ofSeconds(1))\n            .readTimeout(Duration.ofSeconds(5))\n            .allowLocalhost(true)\n            .build()\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"key-production-principles",children:"Key Production Principles"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Proper Timeouts"})," - Set appropriate connection and read timeouts"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Retry Logic"})," - Enable retry for transient failures"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Error Handling"})," - Catch and handle specific exception types"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Logging"})," - Log errors and important events"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Security"})," - Use proper authentication headers"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Circuit Breaker"})," - Implement circuit breaker pattern for resilience"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Configuration"})," - Externalize configuration for different environments"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Monitoring"})," - Add health checks and monitoring"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Async Support"})," - Use async methods for better performance"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Fallback Values"})," - Provide fallback values for critical operations"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var r=t(6540);const i={},o=r.createContext(i);function a(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);